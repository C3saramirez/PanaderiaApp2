@page "/productos/nuevo"
@page "/productos/editar/{Id:int}"
@rendermode InteractiveServer
@inject IRepositorioProductos _repositorioProductos;
@inject IRepositorioInsumos _repositorioInsumos;
@inject NavigationManager _navigator;
<PageTitle>@_message producto</PageTitle>
<h2>@_message producto</h2>

<EditForm Model="_producto" FormName="frmProductos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="row mb-3">
        <label for="txtNombre" class="col-2 col-form-label">Nombre</label>
        <div class="col-10">
            <InputText class="form-control" id="txtNombre" @bind-Value="_producto.Nombre"></InputText>
            <ValidationMessage For="@(() => _producto.Nombre)" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="txtDescripcion" class="col-form-label col-2">Descripción</label>
        <div class="col-10">
            <InputText class="form-control" id="txtDescripcion" @bind-Value="_producto.Descripcion"></InputText>
            <ValidationMessage For="@(() => _producto.Descripcion)" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="txtPrecio" class="col-2 col-form-label">Precio de venta</label>
        <div class="col-10">
            <InputNumber class="form-control" id="txtPrecio" @bind-Value="_producto.Precio"></InputNumber>
            <ValidationMessage For="@(() => _producto.Precio)" />
        </div>
    </div>
    <div class="row mb-3">
        <label for="txtinsumos" class="col-2 col-form-label">Insumos</label>
        <div class="col-10">
            <InputSelect class="form-control" id="txtinsumos" @bind-Value="_insumosSeleccionados" multiple size="3">
                @foreach (var insumo in _insumos)
                {
                    <option value="@insumo.Id">@insumo.Nombre</option>
                }
            </InputSelect>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-danger ms-2" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _message = "";
    private Producto _producto = new();
    private List<Insumo> _insumos = new();
    private int[] _insumosSeleccionados = new int[] { };

    protected override async Task OnInitializedAsync()
    {
        _insumos = await _repositorioInsumos.GetAll();
        if (Id > 0)
        {
            Producto? producto = await _repositorioProductos.Get(Id);
            _producto.Id = producto!.Id;
            _producto.Nombre = producto.Nombre;
            _producto.Descripcion = producto.Descripcion;
            _producto.Precio = producto.Precio;
            if (_producto.Insumos.Count != 0)
            {
                _insumosSeleccionados = _producto.Insumos.Select(i => i.Id).ToArray();
            }
            _message = "Editar";
        }
        else
        {
            _message = "Nuevo";
        }
    }

    private async void Guardar()
    {
        if (_insumosSeleccionados.Count() > 0)
        {
            List<Insumo> insumos = new();
            foreach (int idInsumo in _insumosSeleccionados)
            {
                insumos.Add(_insumos.First(r => r.Id == idInsumo));
            }
            _producto.Insumos = insumos;
        }
        else
        {
            _producto.Insumos = null;
        }

        if (Id > 0)
        {
            await _repositorioProductos.Update(Id, _producto!);
        }
        else
        {
            await _repositorioProductos.Add(_producto);
        }
        Cancelar();
    }

    private void Cancelar()
    {
        _navigator.NavigateTo("/productos");
    }
}
