@page "/proveedores"
@rendermode InteractiveServer
@inject NavigationManager _navigator;
@inject IRepositorioProveedores _repositorio;

<h3>Proveedores</h3>

<a class="btn btn-success" href="proveedores/nuevo">Agregar Proveedor</a>

@if (_proveedores == null)
{
    <p>Cargando...</p>
}

else if (_proveedores.Count == 0)
{
    <p>No existen proveedores</p>
}

else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Correo</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Insumos</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Proveedor proveedor in _proveedores)

            {
                <tr>
                    <td>@proveedor.Id</td>
                    <td>@proveedor.Nombre</td>
                    <td>@proveedor.Correo</td>
                    <td>@proveedor.Telefono</td>
                    <td>@proveedor.Direccion</td>
                    <td>@proveedor.Insumos ?? No hay insumos asignados</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>Editar(proveedor.Id)">Editar</button>
                        <button class="btn btn-danger" @onclick="()=>Eliminar(proveedor)">Eliminar</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {

    private List<Proveedor>? _proveedores;

    protected override async Task OnInitializedAsync()
    {
        _proveedores = await _repositorio.GetAll();
    }

    private async void Eliminar(Proveedor proveedor)
    {
        await _repositorio.Delete(proveedor.Id);
        _proveedores!.Remove(proveedor);
        StateHasChanged();
    }

    private void Editar(int id)
    {
        _navigator.NavigateTo($"/proveedores/editar/{id}");
    }

}